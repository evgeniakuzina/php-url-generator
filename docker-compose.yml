version: '3'
services:

  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: digitalocean.com/php
    container_name: app
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      CONTAINER_ROLE: app
    working_dir: /var/www
    volumes:
       - ./:/var/www
    networks:
      - app-network

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - dbdata:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  #Redis Service
  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
    - redis-data:/data
    networks:
      - app-network

  scheduler:
    image: digitalocean.com/php
    container_name: scheduler
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - .:/var/www
    environment:
      APP_ENV: local
      CONTAINER_ROLE: scheduler
      CACHE_DRIVER: redis
      QUEUE_DRIVER: redis
      REDIS_HOST: redis
    networks:
      - app-network

  queue:
    image: digitalocean.com/php
    container_name: queue
    depends_on:
      - app
    volumes:
      - .:/var/www
    environment:
      APP_ENV: local
      CONTAINER_ROLE: queue
      CACHE_DRIVER: redis
      QUEUE_DRIVER: redis
      REDIS_HOST: redis
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
  redis-data:
